<?xml version="1.0" encoding="utf-8"?>
<!-- 以下为简单bean配置的schema，在不同jar包中有schema使用文件 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                            http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                            http://www.springframework.org/schema/context    
                            http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                            http://www.springframework.org/schema/mvc    
                            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                            http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
                            http://www.springframework.org/schema/task
                            http://www.springframework.org/schema/task/spring-task.xsd">
	
	<task:annotation-driven/><!-- 定时任务扫描 -->
	<mvc:annotation-driven/><!-- 配合默认的注解处理映射器使用，使mvc能注解驱动 --> 
	<tx:annotation-driven transaction-manager="transactionManager"/><!-- 使事务管理能注解驱动 -->
	<context:component-scan base-package="com.genius.cm"/><!-- 扫描注解并注册为bean -->
	<!-- properties解析器 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties"/><!-- 此处不能使用classpath* -->
	</bean>
	
	<!-- 数据源配置 -->
	<bean id="dataSource1" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${mysql.driverClassName}"/>
		<property name="maxActive" value="${mysql.maxActive}"/>
		<property name="maxIdle" value="${mysql.maxIdle}"/>
		<property name="initialSize" value="${mysql.initialSize}"/>
		<property name="maxWait" value="${mysql.maxWait}"/>
		<property name="password" value="${mysql.password}"/>
		<property name="username" value="${mysql.username}"/>
		<property name="url" value="${mysql.url}"/>
	</bean>
	<!-- 数据源配置 2-->
	<bean id="dataSource2" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${sqlserver.driverClassName}"/>
		<property name="maxActive" value="${sqlserver.maxActive}"/>
		<property name="maxIdle" value="${sqlserver.maxIdle}"/>
		<property name="initialSize" value="${sqlserver.initialSize}"/>
		<property name="maxWait" value="${sqlserver.maxWait}"/>
		<property name="password" value="${sqlserver.password}"/>
		<property name="username" value="${sqlserver.username}"/>
		<property name="url" value="${sqlserver.url}"/>
	</bean>
	
	<!-- 多数据源配置  -->
	<bean id="dataSource" class="com.genius.cm.utils.DynamicDataSource">    
    <property name="targetDataSources">    
        <map key-type="java.lang.String">    
            <entry value-ref="dataSource1" key="dataSource1"></entry>    
            <entry value-ref="dataSource2" key="dataSource2"></entry>    
        </map>    
    </property>  
    <property name="defaultTargetDataSource" ref="dataSource1"></property>       
	</bean>
	
	<!-- session工厂配置 -->
	<!-- 此处用mybatis-spring.jar中的工厂类代替了mybatis的工厂类 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定数据源 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 如果没有mybatis配置文件，可以指定映射文件 -->
		<property name="mapperLocations" value="classpath:com/genius/cm/mapper/**/*.xml"/>
	</bean>

	<!-- 使用mybatis-spring.jar中的映射扫描器扫描所有的dao接口，注入spring容器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.genius.cm.dao"/><!-- dao接口所在路径 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/><!--必须是value值，不用使用ref引用， 没有废弃的工厂类 -->
	</bean>
	
	<!-- 事务管理器之一，支持jdbc和ibatis， id名称默认是transactionManager -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 在tx命名空间下，配置声明式事务，即配置了关于事务的通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager"><!-- 指定事务管理器 -->
		<tx:attributes>
			<!-- required表示save开头的方法都需要事务管理，其他的事务属性为默认值 -->
			<tx:method name="add*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" timeout="-1"/>
			<!-- supports表示任意方法可进行事务管理，也可不进行事务管理，其他的事务属性为默认值-->
			<tx:method name="*" isolation="DEFAULT" propagation="SUPPORTS" read-only="false" timeout="-1"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 在aop命名空间下，定义执行通知的切入点 -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.genius.cm.service.impl.UserEmpServiceImpl.*(..))"/>
	</aop:config>
	
	<!-- 登录拦截器 -->
	<bean id="loginHandlerInterceptor" class="com.genius.cm.interceptor.LoginHandlerInterceptor"/>
	<!-- mvc命名空间下拦截器的使用-->
	<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
		<property name="interceptors">
			<list>
				<ref bean="loginHandlerInterceptor"/>
			</list>
		</property>
	</bean>
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/userEmp/**"/>
			<mvc:mapping path="/appInfo/**"/>
			<mvc:mapping path="/emailInfo/**"/>
			<mvc:mapping path="/propertyInfo/**"/>
			<mvc:mapping path="/rtxInfo/**"/>
			<mvc:mapping path="/ruleConfig/**"/>
			<ref bean="loginHandlerInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
</beans>